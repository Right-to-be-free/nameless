### Step 1: Define the `Product` Class
This class represents a basic product in the store.
```python
class Product:
    def __init__(self, name, price, quantity):
        """Constructor to initialize product details"""
        self.name = name
        self.price = price
        self.quantity = quantity
    
    def update_stock(self, amount):
        """Method to update stock quantity"""
        self.quantity += amount
        return f"Updated stock for {self.name}. New quantity: {self.quantity}"
    
    def sell(self, amount):
        """Method to sell an item and reduce stock"""
        if amount > self.quantity:
            return f"Not enough stock for {self.name}!"
        self.quantity -= amount
        return f"Sold {amount} {self.name}(s). Remaining: {self.quantity}"
    
    def __del__(self):
        """Destructor to delete object when no longer needed"""
        print(f"{self.name} is removed from inventory.")
```
---
### Step 2: Define the `PerishableProduct` Class (Inheritance)
This extends the `Product` class to add an expiry date for perishable items.
```python
class PerishableProduct(Product):
    def __init__(self, name, price, quantity, expiry_date):
        """Constructor for perishable items"""
        super().__init__(name, price, quantity)
        self.expiry_date = expiry_date
    
    def check_expiry(self):
        """Method to check expiry date"""
        return f"{self.name} expires on {self.expiry_date}"
```
---
### Step 3: Define the `GroceryStore` Class (Encapsulation)
This class manages the storeâ€™s inventory.
```python
class GroceryStore:
    def __init__(self, store_name, *products):
        """Constructor using *args to accept multiple products"""
        self.store_name = store_name
        self.inventory = {product.name: product for product in products}
    
    def add_product(self, product):
        """Method to add a new product to inventory"""
        self.inventory[product.name] = product
        return f"Added {product.name} to the inventory."
    
    def get_product(self, name):
        """Method to retrieve a product from inventory"""
        return self.inventory.get(name, "Product not found")

    def show_inventory(self):
        """Method to display inventory"""
        return {name: product.quantity for name, product in self.inventory.items()}
    
    def sell_product(self, name, quantity):
        """Method to sell a product"""
        product = self.get_product(name)
        if isinstance(product, Product):
            return product.sell(quantity)
        return "Product not found"
```
---
### Step 4: Define the `Discount` Class (Polymorphism)
This class applies different types of discounts.
```python
class Discount:
    def apply_discount(self, product, *args, **kwargs):
        """Apply discount based on parameters"""
        if args:
            discount = args[0]
            product.price -= product.price * (discount / 100)
        elif "fixed_amount" in kwargs:
            product.price -= kwargs["fixed_amount"]
        return f"New price of {product.name} is {product.price}"
```
---
### Step 5: Execution
#### Create product instances
```python
# Create product instances
rice = Product("Rice", 50, 100)
milk = PerishableProduct("Milk", 20, 50, "2025-03-10")
```
---
#### Create a grocery store and add products
```python
# Create store instance
my_store = GroceryStore("Fresh Mart", rice, milk)
```
---
#### Sell a product
```python
# Selling a product
print(my_store.sell_product("Rice", 10))  # Output: Sold 10 Rice(s). Remaining: 90
```
---
#### Check stock
```python
# Checking stock
print(my_store.show_inventory())  # Output: {'Rice': 90, 'Milk': 50}
```
---
#### Apply discount to products
```python
# Applying discount
discount = Discount()
print(discount.apply_discount(rice, 10))  # 10% discount
print(discount.apply_discount(milk, fixed_amount=5))  # Fixed amount discount
```
---
#### Check expiry date of perishable product
```python
# Checking expiry date
print(milk.check_expiry())  # Output: Milk expires on 2025-03-10
```
---
### Final Output
1. **Selling rice**
   ```
   Sold 10 Rice(s). Remaining: 90
   ```
2. **Checking stock**
   ```
   {'Rice': 90, 'Milk': 50}
   ```
3. **Applying discount**
   ```
   New price of Rice is 45.0
   New price of Milk is 15
   ```
4. **Checking expiry**
   ```
   Milk expires on 2025-03-10
   ```

This step-by-step breakdown ensures clarity in how OOP concepts work in your grocery store system. Do you want to extend this further, such as adding sales reports or low-stock alerts?

